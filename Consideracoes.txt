Comandos Iniciais no Typescript

* Instalação do Typescript
npm install -g typescript

* Confirma se foi instalado
tsc --version

* Instalação do tsconfig.json
tsc --init

* Para compilar o typescript de forma prática, siga os seguintes passos:
    1º Ctrl + Shift + B
        1.1º    Escolha o 'build' para transpilar o typescript e executar as intruções
        1.2º    Escolha o 'watch' para transpilar o código e acompanhar as mudanças
                do código, como na identificação de erros.

* Para executar o programa em typescript
node .\nome_arquivo (no cmd você deve estar dentro da pasta que contém o arquivo)


Boolean x Boolean

Boolean -> indica um boolean para objeto
boolean -> tipo primitivo indicado para variáveis

Number x number

Number -> indica um number para objeto
number -> tipo primitivo indicado para variáveis

number != bigint

number -> tipo para conjunto de números (inteiro, decimal, hexadecimal, octal, binário etc)
bigint -> tipo primitivo que permite a manipulação de números grandes sem erros e arredondamentos
            -> no final de cada número deve haver o caractere 'n'
            -> * esse tipo é disponível somente a partir do ES2020 ou ESNEXT (altera-se isso no tsconfig.json)

TUPLAS -> permitem o armazenamento em conjunto de diferentes tipos de dados
        -> são arrays de elementos fixos, de forma que sejam colocados em uma ordem pré-definida na tipagem

ENUM -> * Não é tão recomendado
        Armazena valores que representam opções fixas
        O nome de um enum é colocado em letra maiúscula
        Permite a proteção contra erros ou valores inválidos, uma vez que esses valores já foram pré-definidos
        Normalmente, são utilizados em contextos onde há valores fixos a serem manipulados
            * Exemplo:
                        enum Estacao {
                                        VERAO,    // 0
                                        OUTONO,   // 1
                                        INVERNO,  // 2
                                        PRIMAVERA // 3
                                     }

                        enum Estacao {
                                        VERAO       = "Verão",
                                        OUTONO      = "Outono",
                                        INVERNO     = "Inverno",
                                        PRIMAVERA   = "Primavera"
                                      }
UNKNOWN -> Utilizado em contextos em que não se sabe o tipo a ser definido a um elemento
           Verifica o tipo dos elementos antes de qualquer operação
           TODOS OS TIPOS PODEM SER ATRIBUIDOS A UNKNOWN

VOID -> É possível utilizar esse tipo em variáveis.
        Os valores seriam -> undefined | null (para ativar essa opção, é necessário definir como 'false' a opção 
        'strictNullChecks' no tsconfig.json)

NULL -> ausência de valor intencional
        pode ser atribuído a uma variável
        é considerado como um objeto
        valor de null será um valor primitivo

UNDEFINED -> variáveis não inicializadas são do tipo 'undefined'
             é considerado um tipo

== x ===
        ==  -> compara os valores e converte o seu tipo caso necessário
        === -> compara os valores e os tipos

NEVER -> representa valores que nunca ocorrem
         quando apontado indica que não é possível atribuir valor aquele elemento

object x Object ->
                  Object: permite a criação de objetos que aceitam tipos primitivos como valores, como strings,numbers etc.
                        Exemplo: {
                                        let obj: Object = {};
                                        obj = 1;
                                        obj = '1';
                                        obj = true;
                                        obj = Symbol(1);
                                }
                  object: permite a criação de objetos desde que os valores a serem atribuídos não sejam do tipo primitivo.
                  Exemplo: {
                                let obj: object = {};
                                obj = {};
                                obj = [];
                                obj = () => {};

                           }

                  { } -> simboliza um objeto sem propriedades, porém com as mesmas funções de Object.